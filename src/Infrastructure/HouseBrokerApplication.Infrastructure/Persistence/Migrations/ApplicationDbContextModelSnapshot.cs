// <auto-generated />
using System;
using HouseBrokerApplication.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HouseBrokerApplication.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b75dbfe5-3033-4fb0-9727-dd7b079d5ef5"),
                            Name = "Broker",
                            NormalizedName = "BROKER"
                        },
                        new
                        {
                            Id = new Guid("2105dd3b-1d9d-4aac-92ef-6ab4237cfb45"),
                            Name = "Seeker",
                            NormalizedName = "SEEKER"
                        });
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce1c2771-2f31-4ad4-8dfa-030e2a00ab63"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0340f3f7-a80a-4e19-a703-ab4db04bad1a",
                            Email = "milan.chapagain@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Milan Chapagain",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILAN.CHAPAGAIN@GMAIL.COM",
                            NormalizedUserName = "MILAN.CHAPAGAIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAETO0Tq/wQR6SuuydjnIOvirx5iGbSdKzlKztJVuJ2EQAYXH7zRmvxhFz4nEvb5tA==",
                            PhoneNumberConfirmed = false,
                            Role = "Broker",
                            TwoFactorEnabled = false,
                            UserName = "milan.chapagain@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("7025cf80-002e-4d28-97d8-8f5140caa9b5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edcac11a-6daf-4492-bf7d-7571faccf219",
                            Email = "ram.shrestha@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ram Shrestha",
                            LockoutEnabled = false,
                            NormalizedEmail = "RAM.SHRESTHA@GMAIL.COM",
                            NormalizedUserName = "RAM.SHRESTHA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENmLb9s9ci/U31aIOA7Q1VopDjEYAnHTsMyWbn+BveBsIBrN6eCwD2Qn3pp8b/p1ow==",
                            PhoneNumberConfirmed = false,
                            Role = "Seeker",
                            TwoFactorEnabled = false,
                            UserName = "ram.shrestha@gmail.com"
                        });
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.CommissionRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MaxPrice")
                        .HasColumnType("float");

                    b.Property<double>("MinPrice")
                        .HasColumnType("float");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Rates", "HBA");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxPrice = 500.0,
                            MinPrice = 0.0,
                            Percentage = 0.02
                        },
                        new
                        {
                            Id = 2,
                            MaxPrice = 1000.0,
                            MinPrice = 500.0,
                            Percentage = 0.017500000000000002
                        },
                        new
                        {
                            Id = 3,
                            MaxPrice = 2000.0,
                            MinPrice = 1000.0,
                            Percentage = 0.014999999999999999
                        });
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.HouseListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrokerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Commission")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PropertyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.ToTable("Houses", "HBA");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc1c4167-a006-4af0-9de3-f0331a545cdc"),
                            BrokerId = new Guid("ce1c2771-2f31-4ad4-8dfa-030e2a00ab63"),
                            Commission = 131.0,
                            Description = "2 BHK modern apartment in heart of the city.",
                            Location = "Kathmandu",
                            Price = 750.0,
                            PropertyType = "House",
                            Title = "House in Kathmandu"
                        },
                        new
                        {
                            Id = new Guid("ac378d79-7c1f-4090-a353-4a3727c874c8"),
                            BrokerId = new Guid("ce1c2771-2f31-4ad4-8dfa-030e2a00ab63"),
                            Commission = 187.0,
                            Description = "Luxurious villa with city view.",
                            Location = "Kathmandu",
                            Price = 1250.0,
                            PropertyType = "Villa",
                            Title = "Luxury Villa in Kathmandu"
                        });
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.ListingImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HouseListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HouseListingId");

                    b.ToTable("Images", "HBA");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23349765-191b-4145-b352-73d23f0f31f6"),
                            HouseListingId = new Guid("bc1c4167-a006-4af0-9de3-f0331a545cdc"),
                            Url = "https://www.pexels.com/photo/brown-and-gray-painted-house-in-front-of-road-1396122/"
                        },
                        new
                        {
                            Id = new Guid("bc99386f-c0f4-45b0-bcaf-dc032fb29467"),
                            HouseListingId = new Guid("ac378d79-7c1f-4090-a353-4a3727c874c8"),
                            Url = "https://www.pexels.com/photo/house-lights-turned-on-106399/"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.HouseListing", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationUser", "Broker")
                        .WithMany("Listings")
                        .HasForeignKey("BrokerId");

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.ListingImage", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.HouseListing", "HouseListing")
                        .WithMany("Images")
                        .HasForeignKey("HouseListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HouseListing");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.HouseListing", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
