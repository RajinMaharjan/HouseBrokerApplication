// <auto-generated />
using System;
using HouseBrokerApplication.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HouseBrokerApplication.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250703070904_Initial Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Broker 1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "086d125e-abfe-4293-8265-a4ae59e6dbeb",
                            Email = "milan.chapagain@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Milan Chapagain",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILAN.CHAPAGAIN@GMAIL.COM",
                            NormalizedUserName = "MILAN.CHAPAGAIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP3Oo6Lc8PMnWMKTbxwbhVxswJZcFq+TQlPTND0vwHSD2qEMhe1XVqihTNrCXnpuYQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Broker",
                            SecurityStamp = "6aee2556-bfa3-4029-9c6d-119944426724",
                            TwoFactorEnabled = false,
                            UserName = "milan.chapagain@gmail.com"
                        },
                        new
                        {
                            Id = "Seeker 1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f66ca4b2-98b1-4a0f-8fb4-2c5e46d430a4",
                            Email = "ram.shrestha@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ram Shrestha",
                            LockoutEnabled = false,
                            NormalizedEmail = "RAM.SHRESTHA@GMAIL.COM",
                            NormalizedUserName = "RAM.SHRESTHA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPCUyXlKNg7r/1YA3477mMz24Mvpn7dqncC9qQ7a6wbW93MlytzxhqRd8JmzD7iM6Q==",
                            PhoneNumberConfirmed = false,
                            Role = "Seeker",
                            SecurityStamp = "d22fb4ea-e577-46fd-9f2c-92cd5e1c376d",
                            TwoFactorEnabled = false,
                            UserName = "ram.shrestha@gmail.com"
                        });
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.CommissionRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CommissionRates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxPrice = 500m,
                            MinPrice = 0m,
                            Percentage = 0.02
                        },
                        new
                        {
                            Id = 2,
                            MaxPrice = 1000m,
                            MinPrice = 500m,
                            Percentage = 0.017500000000000002
                        },
                        new
                        {
                            Id = 3,
                            MaxPrice = 79228162514264337593543950335m,
                            MinPrice = 1000m,
                            Percentage = 0.014999999999999999
                        });
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.HouseListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrokerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.ToTable("HouseListings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("261ed466-4c1f-40e2-b9f7-ee6ab5403fd1"),
                            BrokerId = "Broker 1",
                            Commission = 131250m,
                            Description = "2 BHK modern apartment in heart of the city.",
                            Location = "Kathmandu",
                            Price = 7500000m,
                            PropertyType = "House",
                            Title = "House in Kathmandu"
                        },
                        new
                        {
                            Id = new Guid("94c1b402-082c-42e4-bc99-d69c193b6c72"),
                            BrokerId = "Broker 1",
                            Commission = 187500m,
                            Description = "Luxurious villa with city view.",
                            Location = "Kathmandu",
                            Price = 12500000m,
                            PropertyType = "Villa",
                            Title = "Luxury Villa in Kathmandu"
                        });
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.ListingImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HouseListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HouseListingId");

                    b.ToTable("ListingImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c6f20f9-2358-44e6-a1a5-a840ec5c75a3"),
                            HouseListingId = new Guid("261ed466-4c1f-40e2-b9f7-ee6ab5403fd1"),
                            Url = "https://www.pexels.com/photo/brown-and-gray-painted-house-in-front-of-road-1396122/"
                        },
                        new
                        {
                            Id = new Guid("cc12ee2a-8b29-440a-88df-932d4d3ba5b5"),
                            HouseListingId = new Guid("94c1b402-082c-42e4-bc99-d69c193b6c72"),
                            Url = "https://www.pexels.com/photo/house-lights-turned-on-106399/"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Broker",
                            NormalizedName = "BROKER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Seeker",
                            NormalizedName = "SEEKER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.HouseListing", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationUser", "Broker")
                        .WithMany("Listings")
                        .HasForeignKey("BrokerId");

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.ListingImage", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.HouseListing", "HouseListing")
                        .WithMany("Images")
                        .HasForeignKey("HouseListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HouseListing");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HouseBrokerApplication.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("HouseBrokerApplication.Domain.Entities.HouseListing", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
